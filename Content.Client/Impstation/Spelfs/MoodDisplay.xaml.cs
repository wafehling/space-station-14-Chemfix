using System.Linq;
using Content.Client.Chat.Managers;
using Content.Client.Message;
using Content.Shared.Chat;
using Content.Shared.Impstation.Spelfs;
using Content.Shared.Radio;
using Content.Shared.Silicons.Laws;
using Content.Shared.Speech;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.Impstation.Spelfs;

[GenerateTypedNameReferences]
public sealed partial class MoodDisplay : Control
{
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IChatManager _chatManager = default!;
    [Dependency] private readonly EntityManager _entityManager = default!;

    private string GetSharedString()
    {
        return $"[italic][font size=10][color=gray]{Loc.GetString("moods-ui-shared-mood")}[/color][/font][/italic]";
    }

    public MoodDisplay(SpelfMood mood, bool shared)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        var args = mood.MoodVars.Select(var => (var.Key, (object)var.Value)).ToArray();

        if (shared)
            MoodNameLabel.SetMarkup($"{Loc.GetString(mood.MoodName, args)} {GetSharedString()}");
        else
            MoodNameLabel.SetMarkup(Loc.GetString(mood.MoodName, args));
        MoodDescLabel.SetMarkup(Loc.GetString(mood.MoodDesc, args));
    }
}
